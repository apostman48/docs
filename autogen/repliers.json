{
  "openapi": "3.0.3",
  "info": {
    "title": "Repliers Real Estate API",
    "version": "1.0.0",
    "description": "OpenAPI spec for commonly used Repliers endpoints: listings search, single listing, similar listings, address history, and locations.\nAuth: pass your key in the `REPLIERS-API-KEY` header (recommended) or as `repliers_api_key` query parameter."
  },
  "servers": [
    { "url": "https://api.repliers.io" }
  ],
  "tags": [
    { "name": "Listings" },
    { "name": "Locations" }
  ],
  "security": [
    { "RepliersApiKeyHeader": [] }
  ],
  "paths": {
    "/listings": {
      "post": {
        "tags": ["Listings"],
        "operationId": "searchListings",
        "summary": "Search listings",
        "description": "Search listings with filters. Supports market statistics, dynamic map clusters, NLP queries, and AI image search via request parameters.",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ListingSearchRequest" },
              "examples": {
                "basic": {
                  "value": {
                    "query": "Toronto detached with backyard",
                    "status": ["Active"],
                    "price": { "min": 600000, "max": 1200000 },
                    "beds": { "min": 3 },
                    "baths": { "min": 2 },
                    "pagination": { "page": 1, "perPage": 24, "sort": "-listPrice" }
                  }
                },
                "mapPolygon": {
                  "value": {
                    "map": {
                      "type": "Polygon",
                      "coordinates": [[[ -79.45, 43.67 ], [ -79.39, 43.67 ], [ -79.39, 43.64 ], [ -79.45, 43.64 ], [ -79.45, 43.67 ]]]
                    }
                  }
                },
                "radius": {
                  "value": {
                    "radius": { "lat": 43.6532, "lng": -79.3832, "meters": 5000 }
                  }
                },
                "clustersAndStats": {
                  "value": {
                    "clusters": { "zoom": 12 },
                    "marketStats": true
                  }
                },
                "aiImageSearch": {
                  "value": {
                    "aiImageSearch": { "imageUrl": "https://example.com/kitchen.jpg", "match": "kitchen" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListingsResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/listings/{mlsNumber}": {
      "get": {
        "tags": ["Listings"],
        "operationId": "getListing",
        "summary": "Get a single listing by MLS® number",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mlsNumber",
            "required": true,
            "schema": { "type": "string" },
            "description": "MLS® number of the listing"
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details (expanded view may include comparables and MLS history).",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Listing" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/listings/{mlsNumber}/similar": {
      "get": {
        "tags": ["Listings"],
        "operationId": "getSimilarListings",
        "summary": "Get similar listings",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mlsNumber",
            "required": true,
            "schema": { "type": "string" },
            "description": "MLS® number used to find similar properties"
          },
          {
            "in": "query",
            "name": "radius",
            "required": false,
            "schema": { "type": "integer", "minimum": 100, "description": "Meters" },
            "description": "Optional radius override (meters)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": { "type": "integer", "default": 24, "minimum": 1, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Similar listings",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListingsResponse" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/listings/history": {
      "get": {
        "tags": ["Listings"],
        "operationId": "getAddressHistory",
        "summary": "Get address history",
        "description": "Retrieve MLS history for a specific address.",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "parameters": [
          { "in": "query", "name": "address", "required": true, "schema": { "type": "string" } },
          { "in": "query", "name": "city", "required": false, "schema": { "type": "string" } },
          { "in": "query", "name": "province", "required": false, "schema": { "type": "string" }, "description": "Province/State code" },
          { "in": "query", "name": "postalCode", "required": false, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Address history and previous listing activity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "$ref": "#/components/schemas/Address" },
                    "history": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mlsNumber": { "type": "string" },
                          "status": { "type": "string" },
                          "listPrice": { "type": "number" },
                          "soldPrice": { "type": "number", "nullable": true },
                          "listedAt": { "type": "string", "format": "date-time" },
                          "closedAt": { "type": "string", "format": "date-time", "nullable": true }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["Locations"],
        "operationId": "searchLocations",
        "summary": "Search locations",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "parameters": [
          { "in": "query", "name": "q", "schema": { "type": "string" }, "description": "Text to search for locations" },
          { "in": "query", "name": "type", "schema": { "$ref": "#/components/schemas/LocationType" }, "description": "Filter by type (e.g., City, Area, Neighborhood)" },
          { "in": "query", "name": "page", "schema": { "type": "integer", "default": 1, "minimum": 1 } },
          { "in": "query", "name": "perPage", "schema": { "type": "integer", "default": 25, "minimum": 1, "maximum": 100 } }
        ],
        "responses": {
          "200": {
            "description": "Location search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Location" }
                    },
                    "meta": { "$ref": "#/components/schemas/PaginationMeta" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/locations/autocomplete": {
      "get": {
        "tags": ["Locations"],
        "operationId": "autocompleteLocations",
        "summary": "Locations autocomplete",
        "security": [
          { "RepliersApiKeyHeader": [] },
          { "RepliersApiKeyQuery": [] }
        ],
        "parameters": [
          { "in": "query", "name": "q", "required": true, "schema": { "type": "string" }, "description": "User input to autocomplete" },
          { "in": "query", "name": "limit", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 50 } }
        ],
        "responses": {
          "200": {
            "description": "Autocomplete suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Location" }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "RepliersApiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "REPLIERS-API-KEY",
        "description": "Your Repliers API key (recommended)."
      },
      "RepliersApiKeyQuery": {
        "type": "apiKey",
        "in": "query",
        "name": "repliers_api_key",
        "description": "Alternative auth via query string."
      }
    },
    "schemas": {
      "ListingSearchRequest": {
        "type": "object",
        "properties": {
          "query": { "type": "string", "description": "Free-text / NLP query" },
          "status": { "type": "array", "items": { "type": "string" }, "description": "e.g., Active, Sold, Conditional" },
          "price": {
            "type": "object",
            "properties": { "min": { "type": "number" }, "max": { "type": "number" } }
          },
          "beds": {
            "type": "object",
            "properties": { "min": { "type": "number" }, "max": { "type": "number" } }
          },
          "baths": {
            "type": "object",
            "properties": { "min": { "type": "number" }, "max": { "type": "number" } }
          },
          "propertyType": { "type": "array", "items": { "type": "string" } },
          "radius": {
            "type": "object",
            "properties": {
              "lat": { "type": "number" },
              "lng": { "type": "number" },
              "meters": { "type": "integer", "minimum": 1 }
            }
          },
          "map": {
            "type": "object",
            "description": "GeoJSON-like polygon/multipolygon for geo-spatial filtering",
            "properties": {
              "type": { "type": "string", "enum": ["Polygon", "MultiPolygon"] },
              "coordinates": { "type": "array", "items": { "type": "array" } }
            }
          },
          "clusters": {
            "type": "object",
            "properties": {
              "zoom": { "type": "integer", "minimum": 0, "maximum": 22 }
            }
          },
          "marketStats": { "type": "boolean" },
          "aiImageSearch": {
            "type": "object",
            "properties": {
              "imageUrl": { "type": "string", "format": "uri" },
              "match": { "type": "string", "description": "Feature to match (e.g., kitchen, pool)" }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer", "default": 1, "minimum": 1 },
              "perPage": { "type": "integer", "default": 24, "minimum": 1, "maximum": 100 },
              "sort": { "type": "string", "description": "e.g., -listPrice, listPrice, newest" }
            }
          }
        },
        "additionalProperties": true
      },
      "ListingsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Listing" }
          },
          "meta": { "$ref": "#/components/schemas/PaginationMeta" },
          "stats": { "type": "object", "description": "Optional market statistics if requested" },
          "clusters": { "type": "array", "items": { "type": "object" }, "description": "Optional map clusters if requested" }
        }
      },
      "Listing": {
        "type": "object",
        "properties": {
          "mlsNumber": { "type": "string" },
          "status": { "type": "string" },
          "listPrice": { "type": "number" },
          "soldPrice": { "type": "number", "nullable": true },
          "propertyType": { "type": "string" },
          "beds": { "type": "number" },
          "baths": { "type": "number" },
          "sqft": { "type": "number", "nullable": true },
          "lotSize": { "type": "number", "nullable": true },
          "yearBuilt": { "type": "integer", "nullable": true },
          "address": { "$ref": "#/components/schemas/Address" },
          "coordinates": {
            "type": "object",
            "properties": { "lat": { "type": "number" }, "lng": { "type": "number" } }
          },
          "photos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Photo" }
          },
          "openHouses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start": { "type": "string", "format": "date-time" },
                "end": { "type": "string", "format": "date-time" }
              }
            }
          },
          "comparables": { "type": "array", "items": { "$ref": "#/components/schemas/Listing" } },
          "mlsHistory": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": { "type": "string" },
                "date": { "type": "string", "format": "date-time" },
                "price": { "type": "number", "nullable": true }
              }
            }
          }
        },
        "additionalProperties": true
      },
      "Address": {
        "type": "object",
        "properties": {
          "unit": { "type": "string", "nullable": true },
          "streetNumber": { "type": "string" },
          "streetName": { "type": "string" },
          "city": { "type": "string" },
          "province": { "type": "string", "description": "Province/State code" },
          "postalCode": { "type": "string" },
          "country": { "type": "string", "default": "CA" }
        }
      },
      "Photo": {
        "type": "object",
        "properties": {
          "url": { "type": "string", "format": "uri" },
          "alt": { "type": "string" },
          "order": { "type": "integer" }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "$ref": "#/components/schemas/LocationType" },
          "parent": { "type": "string", "nullable": true }
        }
      },
      "LocationType": {
        "type": "string",
        "enum": ["Area", "City", "Neighborhood", "PostalCode", "Region", "Subdivision"]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": { "type": "integer" },
          "perPage": { "type": "integer" },
          "total": { "type": "integer" },
          "totalPages": { "type": "integer" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "message": { "type": "string" }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
        }
      },
      "Unauthorized": {
        "description": "Invalid API key",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" },
            "examples": {
              "invalidKey": {
                "value": { "error": "Invalid API key", "message": "The provided API key is not valid" }
              }
            }
          }
        }
      },
      "RateLimited": {
        "description": "Too many requests",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
        }
      },
      "ServerError": {
        "description": "Server error",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
        }
      }
    }
  }
}
